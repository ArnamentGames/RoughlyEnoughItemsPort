buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.0.104', changing: true
    }
}

plugins {
    id 'java'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

group project.mod_group
version = project.mod_version
archivesBaseName = project.mod_name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: project.mcp_channel.toString(), version: project.mcp_version.toString()

    runs {
        client = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
    }
}

repositories {
    mavenLocal()
    jcenter()
}

configurations {
    jar.archiveName = 'RoughlyEnoughItems-' + version + '.jar'
    // Dependencies to pack into the jar
    extraLibs
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"
    extraLibs "blue.endless:jankson:${project.jankson_version}"

    configurations.implementation.extendsFrom(configurations.extraLibs)
}

jar {
    manifest {
        attributes(["Specification-Title"     : project.mod_id,
                    "Specification-Vendor"    : "Danielshe",
                    "Specification-Version"   : "25.0",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.mod_version,
                    "Implementation-Vendor"   : "Danielshe",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task deobfJar(type: Jar) {
    classifier = 'deobf'
    from sourceSets.main.output
    manifest {
        attributes(["Specification-Title"     : project.mod_id,
                    "Specification-Vendor"    : "Danielshe",
                    "Specification-Version"   : "25.0",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.mod_version,
                    "Implementation-Vendor"   : "Danielshe",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task srcJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives srcJar
}

